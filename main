import logging
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import datetime
import os

# Настройки логирования
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# Словарь для хранения статистики
statistics = {
    'total_messages': 0,
    'start_time': None,
    'user_activity': {}
}

# Список запрещенных слов
banned_words = ['спам', 'мошенничество', 'оскорбление']

# Пороговое значение для модерации
moderation_threshold = 10

# Обработчик команды /start
def start(update, context):
    update.message.reply_text('Привет! Я бот для сбора статистики и модерации чатов.')
    # Начало отсчета времени работы бота
    statistics['start_time'] = datetime.datetime.now()

# Обработчик команды /help
def help(update, context):
    update.message.reply_text('Для справки по использованию бота обратитесь к администратору.')

# Обработчик текстовых сообщений
def echo(update, context):
    global banned_words
    message_text = update.message.text.lower()
    update.message.reply_text('Я получил ваше сообщение: ' + update.message.text)
    # Увеличиваем счетчик общего количества сообщений
    statistics['total_messages'] += 1
    # Обновляем статистику активности участников
    user_id = update.message.from_user.id
    if user_id not in statistics['user_activity']:
        statistics['user_activity'][user_id] = {'messages_sent': 0}
    statistics['user_activity'][user_id]['messages_sent'] += 1

    # Проверяем сообщение на наличие запрещенных слов
    for word in banned_words:
        if word in message_text:
            # Блокируем сообщение и уведомляем пользователя
            update.message.reply_text('Ваше сообщение содержит недопустимый контент и было заблокировано.')
            return

# Обработчик команды /stats
def stats(update, context):
    # Строим отчет о статистике активности участников чата
    report = "Статистика активности участников чата:\n"
    for user_id, activity in statistics['user_activity'].items():
        user_name = context.bot.get_chat_member(update.message.chat_id, user_id).user.first_name
        report += f"{user_name}: Отправлено сообщений - {activity['messages_sent']}\n"

    update.message.reply_text(report)

# Обработчик команды /setmodthreshold
def set_mod_threshold(update, context):
    global moderation_threshold
    if len(context.args) == 1 and context.args[0].isdigit():
        moderation_threshold = int(context.args[0])
        update.message.reply_text(f'Пороговое значение для модерации установлено: {moderation_threshold}')
    else:
        update.message.reply_text('Пожалуйста, укажите целочисленное значение порога для модерации.')

# Обработчик команды /invite
def invite(update, context):
    update.message.reply_text('Приглашение новых участников...')  # Здесь может быть ваш код для приглашения участников

# Обработчик команды /setpermissions
def set_permissions(update, context):
    update.message.reply_text('Установка прав доступа...')  # Здесь может быть ваш код для установки прав доступа

# Функция для генерации отчета о работе бота
def generate_report():
    # Здесь можно добавить логику для генерации отчета
    pass

def main():
    # Токен вашего бота
    updater = Updater(os.environ.get("BOT_TOKEN"), use_context=True)

    # Получаем диспетчер для регистрации обработчиков
    dp = updater.dispatcher

    # Регистрируем обработчики команд
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(CommandHandler("stats", stats))
    dp.add_handler(CommandHandler("setmodthreshold", set_mod_threshold, pass_args=True))
    dp.add_handler(CommandHandler("invite", invite))
    dp.add_handler(CommandHandler("setpermissions", set_permissions))

    # Регистрируем обработчик текстовых сообщений
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, echo))

    # Запускаем бота
    updater.start_polling()

    # Останавливаем бота при нажатии Ctrl + C
    updater.idle()

if __name__ == '__main__':
    main()
